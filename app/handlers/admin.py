from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.admin_inline import admin_inline_kb
from app.config import ADMINS
from app.db import async_session_maker
from app.models import Admin
from app.repositories import faq_repo, unanswered_repo

router = Router()


# === FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ ===
class AddFAQStates(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer = State()


# === FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FAQ ===
class EditFAQStates(StatesGroup):
    waiting_for_new_answer = State()


# === –ö–æ–º–∞–Ω–¥–∞ /admin ===
@router.message(Command("admin"))
async def admin_menu(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    is_admin = False
    if user_id in ADMINS:
        is_admin = True
    else:
        async with async_session_maker() as session:
            admin = await session.get(Admin, user_id)
            if admin:
                is_admin = True

    if not is_admin:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_inline_kb())


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ ===
@router.callback_query(F.data == "admin:add")
async def admin_add(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è FAQ:")
    await state.set_state(AddFAQStates.waiting_for_question)


@router.message(AddFAQStates.waiting_for_question, F.text)
async def add_faq_question(message: Message, state: FSMContext):
    await state.update_data(new_question=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AddFAQStates.waiting_for_answer)


@router.message(AddFAQStates.waiting_for_answer, F.text)
async def add_faq_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("new_question")
    answer = message.text.strip()

    async with async_session_maker() as session:
        await faq_repo.add_faq(session, question, answer)

    await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ FAQ:\n\n‚ùì {question}\nüí° {answer}")
    await state.clear()


# === –£–¥–∞–ª–µ–Ω–∏–µ FAQ ===
@router.callback_query(F.data == "admin:delete")
async def admin_delete(callback: CallbackQuery):
    await callback.answer()

    async with async_session_maker() as session:
        faqs = await faq_repo.all_faqs(session)

    if not faqs:
        await callback.message.answer("üì≠ –ë–∞–∑–∞ FAQ –ø—É—Å—Ç–∞.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"‚ùå {f.id}. {f.question}", callback_data=f"del_faq:{f.id}")]
            for f in faqs
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.callback_query(F.data.startswith("del_faq:"))
async def confirm_delete(callback: CallbackQuery):
    faq_id = int(callback.data.split(":")[1])

    async with async_session_maker() as session:
        success = await faq_repo.delete_faq(session, faq_id)

    if success:
        await callback.message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å #{faq_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å #{faq_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ ===
@router.callback_query(F.data == "admin:edit")
async def admin_edit(callback: CallbackQuery):
    await callback.answer()

    async with async_session_maker() as session:
        faqs = await faq_repo.all_faqs(session)

    if not faqs:
        await callback.message.answer("üì≠ –ë–∞–∑–∞ FAQ –ø—É—Å—Ç–∞.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úè {f.id}. {f.question}", callback_data=f"edit_faq:{f.id}")]
            for f in faqs
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)


@router.callback_query(F.data.startswith("edit_faq:"))
async def start_edit(callback: CallbackQuery, state: FSMContext):
    faq_id = int(callback.data.split(":")[1])
    await state.update_data(edit_faq_id=faq_id)

    await callback.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ FAQ:")
    await state.set_state(EditFAQStates.waiting_for_new_answer)
    await callback.answer()


@router.message(EditFAQStates.waiting_for_new_answer, F.text)
async def save_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    faq_id = data.get("edit_faq_id")
    new_answer = message.text.strip()

    async with async_session_maker() as session:
        success = await faq_repo.update_faq(session, faq_id=faq_id, answer=new_answer)


    if success:
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è FAQ #{faq_id}")
    else:
        await message.answer(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å #{faq_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


# === –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ===
@router.callback_query(F.data == "admin:unanswered")
async def admin_unanswered(callback: CallbackQuery):
    await callback.answer()

    async with async_session_maker() as session:
        questions = await unanswered_repo.get_recent_unanswered(session, limit=5)

    if not questions:
        await callback.message.answer("üì≠ –ù–µ—Ç –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ FAQ:\n\n"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ FAQ: {q.question_text[:30]}...", callback_data=f"add_from_unanswered:{q.id}")]
            for q in questions
        ]
    )
    for q in questions:
        text += f"‚ùì {q.question_text}\n"

    await callback.message.answer(text, reply_markup=kb)


@router.callback_query(F.data.startswith("add_from_unanswered:"))
async def add_from_unanswered(callback: CallbackQuery, state: FSMContext):
    q_id = int(callback.data.split(":")[1])

    async with async_session_maker() as session:
        questions = await unanswered_repo.get_recent_unanswered(session, limit=10)
        q = next((x for x in questions if x.id == q_id), None)

    if not q:
        await callback.message.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(new_question=q.question_text)
    await callback.message.answer(f"‚úç –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:\n\n‚ùì {q.question_text}")
    await state.set_state(AddFAQStates.waiting_for_answer)
    await callback.answer()
