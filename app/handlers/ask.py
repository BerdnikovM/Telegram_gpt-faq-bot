from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.db import async_session_maker
from app.services import faq_service
from app.repositories import faq_repo

router = Router()


# === FSM ===
class AskStates(StatesGroup):
    waiting_for_question = State()
    clarification = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è


# === 1. –ö–Ω–æ–ø–∫–∞ "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" ===
@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(AskStates.waiting_for_question)
    await message.answer(
        "‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–ª–∏ —Å–ø—Ä–æ—à—É —É –ò–ò ü§ñ"
    )


# === 2. –ö–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ" ===
@router.message(F.text == "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ")
async def about_service(message: Message):
    text = (
        "‚ÑπÔ∏è <b>–û —Å–µ—Ä–≤–∏—Å–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–û–Ω –∏—â–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, –∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç ‚Äî "
        "–æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (GPT).\n\n"
        "‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ üìã –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
        "‚Ä¢ ü§ñ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ üìà –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö\n\n"
        "‚ùó –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç –º–æ–∂–µ—Ç –∏–Ω–æ–≥–¥–∞ –æ—à–∏–±–∞—Ç—å—Å—è, "
        "–ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é."
    )
    await message.answer(text)


# === 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ===
@router.message(AskStates.waiting_for_question, ~F.text)
async def reject_non_text(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∞ –Ω–µ –≤–ª–æ–∂–µ–Ω–∏–µ.")


# === 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ===
@router.message(AskStates.waiting_for_question, F.text)
async def handle_free_text(message: Message, state: FSMContext):
    text = message.text.strip()

    if len(text) > 512:
        await message.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_id = message.from_user.id

    async with async_session_maker() as session:
        answer, candidates, need_clarification = await faq_service.get_answer_from_faq(
            session, user_id, text
        )

    if answer:  # exact match
        await message.answer(answer)
        await state.clear()
        return

    if need_clarification and candidates:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        await state.update_data(orig_question=text, candidates_ids=[c.id for c in candidates])

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"‚ùì {c.question}", callback_data=f"clarify:{c.id}")]
                for c in candidates
            ] + [[InlineKeyboardButton(text="‚ùå –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="clarify:none")]]
        )

        await state.set_state(AskStates.clarification)
        await message.answer("‚ùì –Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=kb)
        return

    # fallback: –≤–æ–æ–±—â–µ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Üí —Å—Ä–∞–∑—É GPT
    async with async_session_maker() as session:
        gpt_answer = await faq_service.get_answer_from_gpt_cache_or_llm(
            session,
            user_id=user_id,
            text=text,
            context_faqs=[],
        )
    await message.answer(gpt_answer)
    await state.clear()


# === 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ ===
@router.callback_query(F.data.startswith("clarify:"))
async def handle_clarification(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    orig_question = data.get("orig_question")
    candidates_ids = data.get("candidates_ids", [])

    choice = callback.data.split(":")[1]

    async with async_session_maker() as session:
        if choice == "none":
            # –ø–æ–¥—Ç—è–Ω–µ–º —Ç–µ—Ö –∂–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (top-3), —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            context_faqs = []
            for cid in candidates_ids[:3]:
                faq = await faq_repo.get_by_id(session, cid)
                if faq:
                    context_faqs.append(faq)

            gpt_answer = await faq_service.get_answer_from_gpt_cache_or_llm(
                session,
                user_id=callback.from_user.id,
                text=orig_question,
                context_faqs=context_faqs,  # <-- –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç!
            )
            await callback.message.answer(gpt_answer)
        else:
            faq_id = int(choice)
            faq_entry = await faq_service.faq_repo.get_by_id(session, faq_id)
            if faq_entry:
                await faq_service.faq_repo.inc_popularity(session, faq_id)
                await callback.message.answer(f"üí° {faq_entry.answer}")
            else:
                await callback.message.answer("‚ùå –≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    await state.clear()
    await callback.answer()
