from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router()


# === FSM ===
class AskStates(StatesGroup):
    waiting_for_question = State()


# === 1. –ö–Ω–æ–ø–∫–∞ "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" ===
@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(AskStates.waiting_for_question)
    await message.answer(
        "‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–ª–∏ —Å–ø—Ä–æ—à—É —É –ò–ò ü§ñ"
    )


# === 2. –ö–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ" ===
@router.message(F.text == "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ")
async def about_service(message: Message):
    text = (
        "‚ÑπÔ∏è <b>–û —Å–µ—Ä–≤–∏—Å–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–û–Ω –∏—â–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, –∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç ‚Äî "
        "–æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (GPT).\n\n"
        "‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ üìã –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
        "‚Ä¢ ü§ñ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ üìà –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö\n\n"
        "‚ùó –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –±–æ—Ç –º–æ–∂–µ—Ç –∏–Ω–æ–≥–¥–∞ –æ—à–∏–±–∞—Ç—å—Å—è, "
        "–ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é."
    )
    await message.answer(text)


# === 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ===
@router.message(AskStates.waiting_for_question, ~F.text)
async def reject_non_text(message: Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∞ –Ω–µ –≤–ª–æ–∂–µ–Ω–∏–µ.")


# === 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ===
@router.message(AskStates.waiting_for_question, F.text)
async def handle_free_text(message: Message, state: FSMContext):
    text = message.text.strip()

    if len(text) > 512:
        await message.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_id = message.from_user.id

    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è FAQ-—Å–µ—Ä–≤–∏—Å–∞
    # –ü–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –≤—ã–∑–æ–≤–æ–º: answer = await faq_service.get_answer(user_id, text)
    answer = (
        "ü§î –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–æ –ø–æ–∫–∞ —É –º–µ–Ω—è –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ GPT ‚ú®"
    )

    await message.answer(answer)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"
    await state.clear()
