from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select, func, desc
from app.db import async_session_maker
from app.models import FAQEntry
from app.keyboards.faq_inline import faq_list_kb
from app.config import TOP_N_FAQ

router = Router()


# === –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É üìã FAQ ===
@router.message(F.text == "üìã FAQ")
async def show_faq_list(message: Message):
    async with async_session_maker() as session:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ
        total_count = await session.scalar(select(func.count()).select_from(FAQEntry))

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (offset=0)
        result = await session.execute(
            select(FAQEntry.id, FAQEntry.question)
            .order_by(desc(FAQEntry.popularity), FAQEntry.id)
            .limit(TOP_N_FAQ)
            .offset(0)
        )
        faq_items = result.all()

    if not faq_items:
        await message.answer("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç FAQ.")
        return

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ —á–µ–º TOP_N_FAQ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª
    kb = faq_list_kb(faq_items)
    if total_count > TOP_N_FAQ:
        from aiogram.types import InlineKeyboardButton
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="faq:page:1")
        ])

    await message.answer("üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb)


# === –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ===
@router.callback_query(F.data.startswith("faq:") & ~F.data.startswith("faq:page"))
async def faq_answer(callback: CallbackQuery):
    faq_id = int(callback.data.split(":")[1])

    async with async_session_maker() as session:
        result = await session.execute(
            select(FAQEntry).where(FAQEntry.id == faq_id)
        )
        faq_entry = result.scalar_one_or_none()

        if not faq_entry:
            await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        faq_entry.popularity += 1
        await session.commit()

    await callback.message.answer(f"üí° {faq_entry.answer}")
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª


# === –•–µ–Ω–¥–ª–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ===
@router.callback_query(F.data.startswith("faq:page:"))
async def faq_pagination(callback: CallbackQuery):
    page = int(callback.data.split(":")[2])
    offset = page * TOP_N_FAQ

    async with async_session_maker() as session:
        total_count = await session.scalar(select(func.count()).select_from(FAQEntry))

        result = await session.execute(
            select(FAQEntry.id, FAQEntry.question)
            .order_by(desc(FAQEntry.popularity), FAQEntry.id)
            .limit(TOP_N_FAQ)
            .offset(offset)
        )
        faq_items = result.all()

    if not faq_items:
        await callback.answer("‚ö†Ô∏è –ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç", show_alert=True)
        return

    kb = faq_list_kb(faq_items)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –¥–æ–±–∞–≤–∏–º ¬´–ù–∞–∑–∞–¥¬ª
    from aiogram.types import InlineKeyboardButton
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"faq:page:{page-1}"))
    if offset + TOP_N_FAQ < total_count:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"faq:page:{page+1}"))
    if nav_row:
        kb.inline_keyboard.append(nav_row)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.edit_text("üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb)
    await callback.answer()
