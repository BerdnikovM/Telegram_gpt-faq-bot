from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from app.db import async_session_maker
from app.keyboards.faq_inline import faq_list_kb
from app.config import TOP_N_FAQ
from app.repositories import faq_repo

router = Router()


# === –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É üìã FAQ ===
@router.message(F.text == "üìã FAQ")
async def show_faq_list(message: Message):
    async with async_session_maker() as session:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ FAQ
        total_count = len(await faq_repo.all_for_search(session))

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (offset=0)
        faq_items = await faq_repo.top_faq(session, TOP_N_FAQ, offset=0)

    if not faq_items:
        await message.answer("‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç FAQ.")
        return

    kb = faq_list_kb(faq_items)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ", –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    if total_count > TOP_N_FAQ:
        from aiogram.types import InlineKeyboardButton
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="faq:page:1")
        ])

    await message.answer("üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb)


# === –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ===
@router.callback_query(F.data.startswith("faq:") & ~F.data.startswith("faq:page"))
async def faq_answer(callback: CallbackQuery):
    faq_id = int(callback.data.split(":")[1])

    async with async_session_maker() as session:
        faq_entry = await faq_repo.get_by_id(session, faq_id)
        if not faq_entry:
            await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        await faq_repo.inc_popularity(session, faq_id)

    await callback.message.answer(f"üí° {faq_entry.answer}")
    await callback.answer()


# === –•–µ–Ω–¥–ª–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è/–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ===
@router.callback_query(F.data.startswith("faq:page:"))
async def faq_pagination(callback: CallbackQuery):
    page = int(callback.data.split(":")[2])
    offset = page * TOP_N_FAQ

    async with async_session_maker() as session:
        total_count = len(await faq_repo.all_for_search(session))
        faq_items = await faq_repo.top_faq(session, TOP_N_FAQ, offset=offset)

    if not faq_items:
        await callback.answer("‚ö†Ô∏è –ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç", show_alert=True)
        return

    kb = faq_list_kb(faq_items)

    from aiogram.types import InlineKeyboardButton
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"faq:page:{page-1}"))
    if offset + TOP_N_FAQ < total_count:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"faq:page:{page+1}"))
    if nav_row:
        kb.inline_keyboard.append(nav_row)

    await callback.message.edit_text("üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb)
    await callback.answer()
